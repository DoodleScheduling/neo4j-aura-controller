// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OauthTokenScopes = "oauthToken.Scopes"
)

// Defines values for CloudProvider.
const (
	CloudProviderAws   CloudProvider = "aws"
	CloudProviderAzure CloudProvider = "azure"
	CloudProviderGcp   CloudProvider = "gcp"
)

// Defines values for CustomerManagedKeyDataCloudProvider.
const (
	CustomerManagedKeyDataCloudProviderAws   CustomerManagedKeyDataCloudProvider = "aws"
	CustomerManagedKeyDataCloudProviderAzure CustomerManagedKeyDataCloudProvider = "azure"
	CustomerManagedKeyDataCloudProviderGcp   CustomerManagedKeyDataCloudProvider = "gcp"
)

// Defines values for CustomerManagedKeyDataInstanceType.
const (
	CustomerManagedKeyDataInstanceTypeEnterpriseDb CustomerManagedKeyDataInstanceType = "enterprise-db"
	CustomerManagedKeyDataInstanceTypeEnterpriseDs CustomerManagedKeyDataInstanceType = "enterprise-ds"
)

// Defines values for GdsSessionDetailsDataStatus.
const (
	GdsSessionDetailsDataStatusCreating GdsSessionDetailsDataStatus = "Creating"
	GdsSessionDetailsDataStatusExpired  GdsSessionDetailsDataStatus = "Expired"
	GdsSessionDetailsDataStatusFailed   GdsSessionDetailsDataStatus = "Failed"
	GdsSessionDetailsDataStatusReady    GdsSessionDetailsDataStatus = "Ready"
)

// Defines values for InstanceDataCdcEnrichmentMode.
const (
	DIFF InstanceDataCdcEnrichmentMode = "DIFF"
	FULL InstanceDataCdcEnrichmentMode = "FULL"
	OFF  InstanceDataCdcEnrichmentMode = "OFF"
)

// Defines values for InstanceDataStatus.
const (
	InstanceDataStatusCreating      InstanceDataStatus = "creating"
	InstanceDataStatusDestroying    InstanceDataStatus = "destroying"
	InstanceDataStatusLoading       InstanceDataStatus = "loading"
	InstanceDataStatusLoadingFailed InstanceDataStatus = "loading failed"
	InstanceDataStatusOverwriting   InstanceDataStatus = "overwriting"
	InstanceDataStatusPaused        InstanceDataStatus = "paused"
	InstanceDataStatusPausing       InstanceDataStatus = "pausing"
	InstanceDataStatusRestoring     InstanceDataStatus = "restoring"
	InstanceDataStatusResuming      InstanceDataStatus = "resuming"
	InstanceDataStatusRunning       InstanceDataStatus = "running"
	InstanceDataStatusSuspended     InstanceDataStatus = "suspended"
	InstanceDataStatusSuspending    InstanceDataStatus = "suspending"
	InstanceDataStatusUpdating      InstanceDataStatus = "updating"
)

// Defines values for InstanceSummaryCloudProvider.
const (
	Aws   InstanceSummaryCloudProvider = "aws"
	Azure InstanceSummaryCloudProvider = "azure"
	Gcp   InstanceSummaryCloudProvider = "gcp"
)

// Defines values for InstanceType.
const (
	InstanceTypeBusinessCritical InstanceType = "business-critical"
	InstanceTypeEnterpriseDb     InstanceType = "enterprise-db"
	InstanceTypeEnterpriseDs     InstanceType = "enterprise-ds"
	InstanceTypeFreeDb           InstanceType = "free-db"
	InstanceTypeProfessionalDb   InstanceType = "professional-db"
	InstanceTypeProfessionalDs   InstanceType = "professional-ds"
)

// CloudProvider The cloud provider hosting the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid cloud_providers for your project.
type CloudProvider string

// CustomerManagedKey Describes a Customer Managed Key
type CustomerManagedKey struct {
	Data struct {
		// CloudProvider The cloud provider of the key
		CloudProvider CustomerManagedKeyDataCloudProvider `json:"cloud_provider"`

		// Created Timestamp when the key was created
		Created string `json:"created"`

		// Id The id of the key
		Id string `json:"id"`

		// InstanceType The type of instances this key was configured for. Either 'enterprise-db' or 'enterprise-ds'.
		InstanceType CustomerManagedKeyDataInstanceType `json:"instance_type"`

		// KeyId The ID of the key in your Cloud Provider. Equal to Key ARN for AWS.
		KeyId string `json:"key_id"`

		// Name The name of the key
		Name string `json:"name"`

		// Region The region where this key was configured for. The key will be only be available for encrypting instances in this region.
		Region string `json:"region"`

		// Status The status of the key
		Status string `json:"status"`

		// TenantId The project to which the key belongs to
		TenantId string `json:"tenant_id"`
	} `json:"data"`
}

// CustomerManagedKeyDataCloudProvider The cloud provider of the key
type CustomerManagedKeyDataCloudProvider string

// CustomerManagedKeyDataInstanceType The type of instances this key was configured for. Either 'enterprise-db' or 'enterprise-ds'.
type CustomerManagedKeyDataInstanceType string

// Error Used for describing one or more errors returned by an endpoint.
type Error struct {
	Errors []struct {
		// Field The name of the property in the request body that this error refers to, if applicable.
		Field *string `json:"field,omitempty"`

		// Message Detailed explanation of an error that has been encountered. Aimed at developers debugging issues, not recommended to be passed onto the end user.
		Message string `json:"message"`

		// Reason The category of the error.
		Reason string `json:"reason"`
	} `json:"errors"`
}

// GdsSessionDetails Describes a GDS Session
type GdsSessionDetails struct {
	Data *struct {
		// CloudProvider The cloud provider of the session
		CloudProvider *string `json:"cloud_provider,omitempty"`

		// CreatedAt The timestamp when the session was created
		CreatedAt *string `json:"created_at,omitempty"`

		// DatabaseUuid The UUID of the Neo4j database from which the session was created from. Empty if not attached to any instance.
		DatabaseUuid *string `json:"database_uuid,omitempty"`

		// ExpiryDate The timestamp when the session will expire
		ExpiryDate *string `json:"expiry_date,omitempty"`

		// Host The host where the session is running
		Host string `json:"host"`

		// Id The unique identifier for this session
		Id string `json:"id"`

		// InstanceId The id for the instance the session is associated with. Empty if not attached to any instance.
		InstanceId *string `json:"instance_id,omitempty"`

		// Memory The size of the session main memory in GB
		Memory string `json:"memory"`

		// Name The name of the session
		Name string `json:"name"`

		// Region The region where the session is hosted
		Region *string `json:"region,omitempty"`

		// Status The status of the session
		Status GdsSessionDetailsDataStatus `json:"status"`

		// TenantId The project to which the instance belongs to
		TenantId string `json:"tenant_id"`

		// Ttl The time to live of an inactive session before it expires.
		Ttl *int `json:"ttl,omitempty"`

		// UserId The user who created the session
		UserId string `json:"user_id"`
	} `json:"data,omitempty"`
}

// GdsSessionDetailsDataStatus The status of the session
type GdsSessionDetailsDataStatus string

// Instance Describes an Aura instance.
type Instance struct {
	Data struct {
		// CdcEnrichmentMode The CDC mode of the instance. **This field is returned ONLY for VDC or BC instances**
		CdcEnrichmentMode *InstanceDataCdcEnrichmentMode `json:"cdc_enrichment_mode,omitempty"`

		// CloudProvider The cloud provider hosting the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid cloud_providers for your project.
		CloudProvider CloudProvider `json:"cloud_provider"`

		// ConnectionUrl URL for connecting to the Neo4j instance
		ConnectionUrl string `json:"connection_url"`

		// CreatedAt The timestamp when the instance was created
		CreatedAt string `json:"created_at"`

		// CustomerManagedKeyId ID of the Customer Managed Key if one was used for creating the instance
		CustomerManagedKeyId *string `json:"customer_managed_key_id,omitempty"`

		// GraphAnalyticsPlugin The graph analytics plugin configuration of the instance.
		GraphAnalyticsPlugin *bool `json:"graph_analytics_plugin,omitempty"`

		// GraphNodes The number of nodes in an Instance. **This field is returned ONLY for free instances**
		GraphNodes *string `json:"graph_nodes,omitempty"`

		// GraphRelationships The number of relationships in an Instance. **This field is returned ONLY for free instances**
		GraphRelationships *string `json:"graph_relationships,omitempty"`

		// Id The id of the instance
		Id string `json:"id"`

		// Memory The size of the instance memory in GB. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid sizes for your project.
		Memory InstanceMemory `json:"memory"`

		// MetricsIntegrationUrl Metrics integration endpoint URL for the Neo4j instance
		MetricsIntegrationUrl *string `json:"metrics_integration_url,omitempty"`

		// Name The name of the instance
		Name string `json:"name"`

		// Region The region where the instance is hosted. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid regions for your project.
		Region InstanceRegion `json:"region"`

		// SecondariesCount The number of secondaries in an Instance. **This field is returned ONLY for VDC instances**
		SecondariesCount *float32 `json:"secondaries_count,omitempty"`

		// Status The status of the instance
		Status InstanceDataStatus `json:"status"`

		// Storage The size of the instance storage in GB. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid sizes for your project. This field is NOT returned for Aura DB Free instances.
		Storage InstanceStorage `json:"storage"`

		// TenantId The project to which the instance belongs to
		TenantId string `json:"tenant_id"`

		// Type The type of the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid types for your project. The `enterprise-db` type is used to represent Virtual Dedicated Cloud.
		Type InstanceType `json:"type"`

		// VectorOptimized The vector optimization configuration of the instance.
		VectorOptimized *bool `json:"vector_optimized,omitempty"`
	} `json:"data"`
}

// InstanceDataCdcEnrichmentMode The CDC mode of the instance. **This field is returned ONLY for VDC or BC instances**
type InstanceDataCdcEnrichmentMode string

// InstanceDataStatus The status of the instance
type InstanceDataStatus string

// InstanceMemory The size of the instance memory in GB. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid sizes for your project.
type InstanceMemory = string

// InstanceRegion The region where the instance is hosted. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid regions for your project.
type InstanceRegion = string

// InstanceStorage The size of the instance storage in GB. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid sizes for your project. This field is NOT returned for Aura DB Free instances.
type InstanceStorage = string

// InstanceSummary Summary of an Aura instance details, as returned in the get instances endpoint.
type InstanceSummary struct {
	// CloudProvider The cloud provider of the instance
	CloudProvider InstanceSummaryCloudProvider `json:"cloud_provider"`

	// CreatedAt The timestamp when the instance was created
	CreatedAt string `json:"created_at"`

	// Id The id of the instance
	Id string `json:"id"`

	// Name The name of the instance
	Name string `json:"name"`

	// TenantId The project to which the instance belongs to
	TenantId string `json:"tenant_id"`
}

// InstanceSummaryCloudProvider The cloud provider of the instance
type InstanceSummaryCloudProvider string

// InstanceType The type of the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid types for your project. The `enterprise-db` type is used to represent Virtual Dedicated Cloud.
type InstanceType string

// InstanceVersion The Neo4j version of the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid versions for your project.
type InstanceVersion = string

// MetricsIntegrationDetails Details about project metrics integration.
type MetricsIntegrationDetails struct {
	Data struct {
		// Endpoint Metrics integration endpoint URL.
		Endpoint string `json:"endpoint"`
	} `json:"data"`
}

// MiddlewareError Sometimes our API middleware may return an error in this format.
//
// The error message is an explanation of the error that has been encountered. Aimed at developers debugging issues, not recommended to be passed onto the end user.
type MiddlewareError struct {
	// Error Error message describing the problem
	Error *string `json:"error,omitempty"`
}

// Project Describes an Aura project.
type Project struct {
	Data struct {
		// Id The id of the project
		Id string `json:"id"`

		// InstanceConfigurations A list of instance configurations that are supported by the project
		InstanceConfigurations []struct {
			// CloudProvider The cloud provider hosting the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid cloud_providers for your project.
			CloudProvider CloudProvider `json:"cloud_provider"`

			// Memory The size of the instance memory in GB. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid sizes for your project.
			Memory InstanceMemory `json:"memory"`

			// Region The region where the instance is hosted. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid regions for your project.
			Region InstanceRegion `json:"region"`

			// RegionName A human-friendly name for the region
			RegionName string `json:"region_name"`

			// Storage The size of the instance storage in GB. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid sizes for your project. This field is NOT returned for Aura DB Free instances.
			Storage InstanceStorage `json:"storage"`

			// Type The type of the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid types for your project. The `enterprise-db` type is used to represent Virtual Dedicated Cloud.
			Type InstanceType `json:"type"`

			// Version The Neo4j version of the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid versions for your project.
			Version InstanceVersion `json:"version"`
		} `json:"instance_configurations"`

		// Name The name of the project
		Name string `json:"name"`
	} `json:"data"`
}

// ProjectSummary Summary of an Aura project details, as returned in the get projects endpoint.
type ProjectSummary struct {
	// Id The id of the project
	Id string `json:"id"`

	// Name The name of the project
	Name string `json:"name"`
}

// CustomerManagedKeyId defines model for customerManagedKeyId.
type CustomerManagedKeyId = string

// InstanceId defines model for instanceId.
type InstanceId = string

// InstanceIdQuery defines model for instanceIdQuery.
type InstanceIdQuery = string

// OrganizationIdOptional defines model for organizationIdOptional.
type OrganizationIdOptional = string

// SessionId defines model for sessionId.
type SessionId = string

// TenantId defines model for tenantId.
type TenantId = string

// TenantIdForCmkOptional defines model for tenantIdForCmkOptional.
type TenantIdForCmkOptional = string

// TenantIdForSessionsOptional defines model for tenantIdForSessionsOptional.
type TenantIdForSessionsOptional = string

// TenantIdOptional defines model for tenantIdOptional.
type TenantIdOptional = string

// BadGateway defines model for BadGateway.
type BadGateway struct {
	union json.RawMessage
}

// BadRequest Used for describing one or more errors returned by an endpoint.
type BadRequest = Error

// Conflict Used for describing one or more errors returned by an endpoint.
type Conflict = Error

// CustomerManagedKeyNotFound Used for describing one or more errors returned by an endpoint.
type CustomerManagedKeyNotFound = Error

// Forbidden defines model for Forbidden.
type Forbidden struct {
	union json.RawMessage
}

// GatewayTimeout defines model for GatewayTimeout.
type GatewayTimeout struct {
	union json.RawMessage
}

// InstanceNotFound Used for describing one or more errors returned by an endpoint.
type InstanceNotFound = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	union json.RawMessage
}

// ProjectNotFound Used for describing one or more errors returned by an endpoint.
type ProjectNotFound = Error

// ServiceUnavailable defines model for ServiceUnavailable.
type ServiceUnavailable struct {
	union json.RawMessage
}

// SessionConflict Used for describing one or more errors returned by an endpoint.
type SessionConflict = Error

// SessionNotFound Used for describing one or more errors returned by an endpoint.
type SessionNotFound = Error

// SnapshotNotFound Used for describing one or more errors returned by an endpoint.
type SnapshotNotFound = Error

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests struct {
	union json.RawMessage
}

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	union json.RawMessage
}

// UnsupportedMediaType defines model for UnsupportedMediaType.
type UnsupportedMediaType struct {
	union json.RawMessage
}

// GetCustomerManagedKeysParams defines parameters for GetCustomerManagedKeys.
type GetCustomerManagedKeysParams struct {
	// TenantId An optional project ID to filter customer managed keys in a project
	TenantId *TenantIdForCmkOptional `form:"tenantId,omitempty" json:"tenantId,omitempty"`
}

// PostCustomerManagedKeysJSONBody defines parameters for PostCustomerManagedKeys.
type PostCustomerManagedKeysJSONBody struct {
	// CloudProvider The cloud provider hosting the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid cloud_providers for your project.
	CloudProvider CloudProvider `json:"cloud_provider"`

	// InstanceType The type of the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid types for your project. The `enterprise-db` type is used to represent Virtual Dedicated Cloud.
	InstanceType InstanceType `json:"instance_type"`
	KeyId        string       `json:"key_id"`

	// Name The name of the key (any UTF-8 characters with no trailing or leading whitespace).
	Name string `json:"name"`

	// Region The region where the instance is hosted. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid regions for your project.
	Region InstanceRegion `json:"region"`

	// TenantId Project ID
	TenantId string `json:"tenant_id"`
}

// GetSessionsParams defines parameters for GetSessions.
type GetSessionsParams struct {
	// InstanceId Instance ID
	InstanceId *InstanceIdQuery `form:"instanceId,omitempty" json:"instanceId,omitempty"`

	// TenantId An optional project ID to filter GDS Sessions
	TenantId *TenantIdForSessionsOptional `form:"tenantId,omitempty" json:"tenantId,omitempty"`

	// OrganizationId An optional organization ID to filter GDS Sessions
	OrganizationId *OrganizationIdOptional `form:"organizationId,omitempty" json:"organizationId,omitempty"`
}

// PostSessionJSONBody defines parameters for PostSession.
type PostSessionJSONBody struct {
	// CloudProvider The cloud provider hosting the session. Please refer to your Aura project configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid cloud_providers for your project.
	CloudProvider interface{} `json:"cloud_provider,omitempty"`

	// DatabaseUuid The UUID of the Neo4j database from which the session was created from.
	DatabaseUuid *string `json:"database_uuid,omitempty"`

	// InstanceId The ID of the instance the session will be attached to. Enables projecting data from the instance and write-back of results.
	InstanceId *string `json:"instance_id,omitempty"`

	// Memory The memory of the session in 'GB'
	Memory *string `json:"memory,omitempty"`

	// Name The name of the session.
	Name *string `json:"name,omitempty"`

	// Region The region where the session is hosted. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid regions for your project.
	Region *string `json:"region,omitempty"`

	// TenantId The ID of the Tenant/Project to which the session belongs.
	TenantId *string `json:"tenant_id,omitempty"`

	// Ttl The time to live of the session. If not specified, defaults to 1 hour.
	Ttl *string `json:"ttl,omitempty"`
}

// PostSessionsSizingJSONBody defines parameters for PostSessionsSizing.
type PostSessionsSizingJSONBody struct {
	// AlgorithmCategories The algorithm categories to be used in the instance.
	AlgorithmCategories *[]string `json:"algorithm_categories,omitempty"`

	// NodeCount The number of nodes to be stored in the instance.
	NodeCount int `json:"node_count"`

	// NodeLabelCount The number of labels per node.
	NodeLabelCount *int `json:"node_label_count,omitempty"`

	// NodePropertyCount The number of properties per node.
	NodePropertyCount *int `json:"node_property_count,omitempty"`

	// RelationshipCount The number of relationships to be stored in the instance.
	RelationshipCount int `json:"relationship_count"`

	// RelationshipPropertyCount The number of properties per relationship.
	RelationshipPropertyCount *int `json:"relationship_property_count,omitempty"`
}

// GetInstancesParams defines parameters for GetInstances.
type GetInstancesParams struct {
	// TenantId An optional project ID to filter instances in a project
	TenantId *TenantIdOptional `form:"tenantId,omitempty" json:"tenantId,omitempty"`
}

// PostInstancesJSONBody defines parameters for PostInstances.
type PostInstancesJSONBody struct {
	// CloudProvider The cloud provider hosting the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid cloud_providers for your project.
	CloudProvider CloudProvider `json:"cloud_provider"`

	// CustomerManagedKeyId An optional customer managed key to be used for instance creation.
	CustomerManagedKeyId *string `json:"customer_managed_key_id,omitempty"`

	// GraphAnalyticsPlugin An optional graph analytics plugin configuration to be set during instance creation.
	GraphAnalyticsPlugin *bool `json:"graph_analytics_plugin,omitempty"`

	// Memory The size of the instance memory in GB. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid sizes for your project.
	Memory InstanceMemory `json:"memory"`

	// Name The name of the instance (any UTF-8 characters with no trailing or leading whitespace).
	Name string `json:"name"`

	// Region The region where the instance is hosted. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid regions for your project.
	Region InstanceRegion `json:"region"`

	// SourceInstanceId The ID of the source instance when cloning.
	SourceInstanceId *string `json:"source_instance_id,omitempty"`

	// SourceSnapshotId An optional snapshot ID to create an instance from a specific snapshot. `source_instance_id` must also be provided. Note that the snapshot must be exportable in order to create a new instance with it.
	SourceSnapshotId *string `json:"source_snapshot_id,omitempty"`

	// TenantId Project ID
	TenantId string `json:"tenant_id"`

	// Type The type of the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid types for your project. The `enterprise-db` type is used to represent Virtual Dedicated Cloud.
	Type InstanceType `json:"type"`

	// VectorOptimized An optional vector optimization configuration to be set during instance creation.
	VectorOptimized *bool `json:"vector_optimized,omitempty"`

	// Version The Neo4j version of the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid versions for your project.
	Version InstanceVersion `json:"version"`
}

// PostInstancesSizingJSONBody defines parameters for PostInstancesSizing.
type PostInstancesSizingJSONBody struct {
	// AlgorithmCategories The algorithm categories to be used in the instance.
	AlgorithmCategories *[]string `json:"algorithm_categories,omitempty"`

	// InstanceType The type of the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid types for your project. The `enterprise-db` type is used to represent Virtual Dedicated Cloud.
	InstanceType *InstanceType `json:"instance_type,omitempty"`

	// NodeCount The number of nodes to be stored in the instance.
	NodeCount int `json:"node_count"`

	// RelationshipCount The number of relationships to be stored in the instance.
	RelationshipCount int `json:"relationship_count"`
}

// PatchInstanceIdJSONBody defines parameters for PatchInstanceId.
type PatchInstanceIdJSONBody struct {
	// GraphAnalyticsPlugin Add or remove the instance graph analytics plugin.
	GraphAnalyticsPlugin *bool `json:"graph_analytics_plugin,omitempty"`

	// Memory The size of the instance memory in GB. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid sizes for your project.
	Memory *InstanceMemory `json:"memory,omitempty"`

	// Name Edit the instance name in the Aura Console.
	//
	// The name may include any UTF-8 characters with no trailing or leading whitespace.
	Name *string `json:"name,omitempty"`

	// Storage The size of the instance storage in GB. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid sizes for your project. This field is NOT returned for Aura DB Free instances.
	Storage *InstanceStorage `json:"storage,omitempty"`

	// VectorOptimized Add or remove the instance vector optimization.
	VectorOptimized *bool `json:"vector_optimized,omitempty"`
}

// PostOverwriteInstanceJSONBody defines parameters for PostOverwriteInstance.
type PostOverwriteInstanceJSONBody struct {
	SourceInstanceId string  `json:"source_instance_id"`
	SourceSnapshotId *string `json:"source_snapshot_id,omitempty"`
}

// PostPauseInstanceJSONBody defines parameters for PostPauseInstance.
type PostPauseInstanceJSONBody = map[string]interface{}

// PostResumeInstanceJSONBody defines parameters for PostResumeInstance.
type PostResumeInstanceJSONBody = map[string]interface{}

// GetSnapshotsParams defines parameters for GetSnapshots.
type GetSnapshotsParams struct {
	// Date An optional date parameter to list snapshots for a given day, defaults to today.
	Date *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`
}

// PostSnapshotsJSONBody defines parameters for PostSnapshots.
type PostSnapshotsJSONBody = map[string]interface{}

// PostRestoreSnapshotJSONBody defines parameters for PostRestoreSnapshot.
type PostRestoreSnapshotJSONBody = map[string]interface{}

// PostUpgradeInstanceJSONBody defines parameters for PostUpgradeInstance.
type PostUpgradeInstanceJSONBody struct {
	Memory  *string `json:"memory,omitempty"`
	Storage *string `json:"storage,omitempty"`
}

// PostCustomerManagedKeysJSONRequestBody defines body for PostCustomerManagedKeys for application/json ContentType.
type PostCustomerManagedKeysJSONRequestBody PostCustomerManagedKeysJSONBody

// PostSessionJSONRequestBody defines body for PostSession for application/json ContentType.
type PostSessionJSONRequestBody PostSessionJSONBody

// PostSessionsSizingJSONRequestBody defines body for PostSessionsSizing for application/json ContentType.
type PostSessionsSizingJSONRequestBody PostSessionsSizingJSONBody

// PostInstancesJSONRequestBody defines body for PostInstances for application/json ContentType.
type PostInstancesJSONRequestBody PostInstancesJSONBody

// PostInstancesSizingJSONRequestBody defines body for PostInstancesSizing for application/json ContentType.
type PostInstancesSizingJSONRequestBody PostInstancesSizingJSONBody

// PatchInstanceIdJSONRequestBody defines body for PatchInstanceId for application/json ContentType.
type PatchInstanceIdJSONRequestBody PatchInstanceIdJSONBody

// PostOverwriteInstanceJSONRequestBody defines body for PostOverwriteInstance for application/json ContentType.
type PostOverwriteInstanceJSONRequestBody PostOverwriteInstanceJSONBody

// PostPauseInstanceJSONRequestBody defines body for PostPauseInstance for application/json ContentType.
type PostPauseInstanceJSONRequestBody = PostPauseInstanceJSONBody

// PostResumeInstanceJSONRequestBody defines body for PostResumeInstance for application/json ContentType.
type PostResumeInstanceJSONRequestBody = PostResumeInstanceJSONBody

// PostSnapshotsJSONRequestBody defines body for PostSnapshots for application/json ContentType.
type PostSnapshotsJSONRequestBody = PostSnapshotsJSONBody

// PostRestoreSnapshotJSONRequestBody defines body for PostRestoreSnapshot for application/json ContentType.
type PostRestoreSnapshotJSONRequestBody = PostRestoreSnapshotJSONBody

// PostUpgradeInstanceJSONRequestBody defines body for PostUpgradeInstance for application/json ContentType.
type PostUpgradeInstanceJSONRequestBody PostUpgradeInstanceJSONBody

// AsError returns the union data inside the BadGateway as a Error
func (t BadGateway) AsError() (Error, error) {
	var body Error
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromError overwrites any union data inside the BadGateway as the provided Error
func (t *BadGateway) FromError(v Error) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeError performs a merge with any union data inside the BadGateway, using the provided Error
func (t *BadGateway) MergeError(v Error) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMiddlewareError returns the union data inside the BadGateway as a MiddlewareError
func (t BadGateway) AsMiddlewareError() (MiddlewareError, error) {
	var body MiddlewareError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMiddlewareError overwrites any union data inside the BadGateway as the provided MiddlewareError
func (t *BadGateway) FromMiddlewareError(v MiddlewareError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMiddlewareError performs a merge with any union data inside the BadGateway, using the provided MiddlewareError
func (t *BadGateway) MergeMiddlewareError(v MiddlewareError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BadGateway) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BadGateway) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsError returns the union data inside the Forbidden as a Error
func (t Forbidden) AsError() (Error, error) {
	var body Error
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromError overwrites any union data inside the Forbidden as the provided Error
func (t *Forbidden) FromError(v Error) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeError performs a merge with any union data inside the Forbidden, using the provided Error
func (t *Forbidden) MergeError(v Error) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMiddlewareError returns the union data inside the Forbidden as a MiddlewareError
func (t Forbidden) AsMiddlewareError() (MiddlewareError, error) {
	var body MiddlewareError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMiddlewareError overwrites any union data inside the Forbidden as the provided MiddlewareError
func (t *Forbidden) FromMiddlewareError(v MiddlewareError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMiddlewareError performs a merge with any union data inside the Forbidden, using the provided MiddlewareError
func (t *Forbidden) MergeMiddlewareError(v MiddlewareError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Forbidden) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Forbidden) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsError returns the union data inside the GatewayTimeout as a Error
func (t GatewayTimeout) AsError() (Error, error) {
	var body Error
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromError overwrites any union data inside the GatewayTimeout as the provided Error
func (t *GatewayTimeout) FromError(v Error) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeError performs a merge with any union data inside the GatewayTimeout, using the provided Error
func (t *GatewayTimeout) MergeError(v Error) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMiddlewareError returns the union data inside the GatewayTimeout as a MiddlewareError
func (t GatewayTimeout) AsMiddlewareError() (MiddlewareError, error) {
	var body MiddlewareError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMiddlewareError overwrites any union data inside the GatewayTimeout as the provided MiddlewareError
func (t *GatewayTimeout) FromMiddlewareError(v MiddlewareError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMiddlewareError performs a merge with any union data inside the GatewayTimeout, using the provided MiddlewareError
func (t *GatewayTimeout) MergeMiddlewareError(v MiddlewareError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GatewayTimeout) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GatewayTimeout) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsError returns the union data inside the InternalServerError as a Error
func (t InternalServerError) AsError() (Error, error) {
	var body Error
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromError overwrites any union data inside the InternalServerError as the provided Error
func (t *InternalServerError) FromError(v Error) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeError performs a merge with any union data inside the InternalServerError, using the provided Error
func (t *InternalServerError) MergeError(v Error) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMiddlewareError returns the union data inside the InternalServerError as a MiddlewareError
func (t InternalServerError) AsMiddlewareError() (MiddlewareError, error) {
	var body MiddlewareError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMiddlewareError overwrites any union data inside the InternalServerError as the provided MiddlewareError
func (t *InternalServerError) FromMiddlewareError(v MiddlewareError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMiddlewareError performs a merge with any union data inside the InternalServerError, using the provided MiddlewareError
func (t *InternalServerError) MergeMiddlewareError(v MiddlewareError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InternalServerError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InternalServerError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsError returns the union data inside the ServiceUnavailable as a Error
func (t ServiceUnavailable) AsError() (Error, error) {
	var body Error
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromError overwrites any union data inside the ServiceUnavailable as the provided Error
func (t *ServiceUnavailable) FromError(v Error) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeError performs a merge with any union data inside the ServiceUnavailable, using the provided Error
func (t *ServiceUnavailable) MergeError(v Error) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMiddlewareError returns the union data inside the ServiceUnavailable as a MiddlewareError
func (t ServiceUnavailable) AsMiddlewareError() (MiddlewareError, error) {
	var body MiddlewareError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMiddlewareError overwrites any union data inside the ServiceUnavailable as the provided MiddlewareError
func (t *ServiceUnavailable) FromMiddlewareError(v MiddlewareError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMiddlewareError performs a merge with any union data inside the ServiceUnavailable, using the provided MiddlewareError
func (t *ServiceUnavailable) MergeMiddlewareError(v MiddlewareError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ServiceUnavailable) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServiceUnavailable) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsError returns the union data inside the TooManyRequests as a Error
func (t TooManyRequests) AsError() (Error, error) {
	var body Error
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromError overwrites any union data inside the TooManyRequests as the provided Error
func (t *TooManyRequests) FromError(v Error) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeError performs a merge with any union data inside the TooManyRequests, using the provided Error
func (t *TooManyRequests) MergeError(v Error) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMiddlewareError returns the union data inside the TooManyRequests as a MiddlewareError
func (t TooManyRequests) AsMiddlewareError() (MiddlewareError, error) {
	var body MiddlewareError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMiddlewareError overwrites any union data inside the TooManyRequests as the provided MiddlewareError
func (t *TooManyRequests) FromMiddlewareError(v MiddlewareError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMiddlewareError performs a merge with any union data inside the TooManyRequests, using the provided MiddlewareError
func (t *TooManyRequests) MergeMiddlewareError(v MiddlewareError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TooManyRequests) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TooManyRequests) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsError returns the union data inside the Unauthorized as a Error
func (t Unauthorized) AsError() (Error, error) {
	var body Error
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromError overwrites any union data inside the Unauthorized as the provided Error
func (t *Unauthorized) FromError(v Error) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeError performs a merge with any union data inside the Unauthorized, using the provided Error
func (t *Unauthorized) MergeError(v Error) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMiddlewareError returns the union data inside the Unauthorized as a MiddlewareError
func (t Unauthorized) AsMiddlewareError() (MiddlewareError, error) {
	var body MiddlewareError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMiddlewareError overwrites any union data inside the Unauthorized as the provided MiddlewareError
func (t *Unauthorized) FromMiddlewareError(v MiddlewareError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMiddlewareError performs a merge with any union data inside the Unauthorized, using the provided MiddlewareError
func (t *Unauthorized) MergeMiddlewareError(v MiddlewareError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Unauthorized) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Unauthorized) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsError returns the union data inside the UnsupportedMediaType as a Error
func (t UnsupportedMediaType) AsError() (Error, error) {
	var body Error
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromError overwrites any union data inside the UnsupportedMediaType as the provided Error
func (t *UnsupportedMediaType) FromError(v Error) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeError performs a merge with any union data inside the UnsupportedMediaType, using the provided Error
func (t *UnsupportedMediaType) MergeError(v Error) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMiddlewareError returns the union data inside the UnsupportedMediaType as a MiddlewareError
func (t UnsupportedMediaType) AsMiddlewareError() (MiddlewareError, error) {
	var body MiddlewareError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMiddlewareError overwrites any union data inside the UnsupportedMediaType as the provided MiddlewareError
func (t *UnsupportedMediaType) FromMiddlewareError(v MiddlewareError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMiddlewareError performs a merge with any union data inside the UnsupportedMediaType, using the provided MiddlewareError
func (t *UnsupportedMediaType) MergeMiddlewareError(v MiddlewareError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UnsupportedMediaType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UnsupportedMediaType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCustomerManagedKeys request
	GetCustomerManagedKeys(ctx context.Context, params *GetCustomerManagedKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomerManagedKeysWithBody request with any body
	PostCustomerManagedKeysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomerManagedKeys(ctx context.Context, body PostCustomerManagedKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomerManagedKeyId request
	DeleteCustomerManagedKeyId(ctx context.Context, customerManagedKeyId CustomerManagedKeyId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomerManagedKeyId request
	GetCustomerManagedKeyId(ctx context.Context, customerManagedKeyId CustomerManagedKeyId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSessions request
	GetSessions(ctx context.Context, params *GetSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSessionWithBody request with any body
	PostSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSession(ctx context.Context, body PostSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSessionsSizingWithBody request with any body
	PostSessionsSizingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSessionsSizing(ctx context.Context, body PostSessionsSizingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSession request
	DeleteSession(ctx context.Context, sessionId SessionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSession request
	GetSession(ctx context.Context, sessionId SessionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstances request
	GetInstances(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstancesWithBody request with any body
	PostInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstances(ctx context.Context, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstancesSizingWithBody request with any body
	PostInstancesSizingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstancesSizing(ctx context.Context, body PostInstancesSizingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInstanceId request
	DeleteInstanceId(ctx context.Context, instanceId InstanceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstanceId request
	GetInstanceId(ctx context.Context, instanceId InstanceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchInstanceIdWithBody request with any body
	PatchInstanceIdWithBody(ctx context.Context, instanceId InstanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchInstanceId(ctx context.Context, instanceId InstanceId, body PatchInstanceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOverwriteInstanceWithBody request with any body
	PostOverwriteInstanceWithBody(ctx context.Context, instanceId InstanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOverwriteInstance(ctx context.Context, instanceId InstanceId, body PostOverwriteInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPauseInstanceWithBody request with any body
	PostPauseInstanceWithBody(ctx context.Context, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPauseInstance(ctx context.Context, instanceId string, body PostPauseInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostResumeInstanceWithBody request with any body
	PostResumeInstanceWithBody(ctx context.Context, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostResumeInstance(ctx context.Context, instanceId string, body PostResumeInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnapshots request
	GetSnapshots(ctx context.Context, instanceId InstanceId, params *GetSnapshotsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSnapshotsWithBody request with any body
	PostSnapshotsWithBody(ctx context.Context, instanceId InstanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSnapshots(ctx context.Context, instanceId InstanceId, body PostSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnapshotSnapshotid request
	GetSnapshotSnapshotid(ctx context.Context, instanceId InstanceId, snapshotId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRestoreSnapshotWithBody request with any body
	PostRestoreSnapshotWithBody(ctx context.Context, instanceId InstanceId, snapshotId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRestoreSnapshot(ctx context.Context, instanceId InstanceId, snapshotId string, body PostRestoreSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUpgradeInstanceWithBody request with any body
	PostUpgradeInstanceWithBody(ctx context.Context, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUpgradeInstance(ctx context.Context, instanceId string, body PostUpgradeInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjects request
	GetProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectId request
	GetProjectId(ctx context.Context, tenantId TenantId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectMetricsIntegrationDetails request
	GetProjectMetricsIntegrationDetails(ctx context.Context, tenantId TenantId, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCustomerManagedKeys(ctx context.Context, params *GetCustomerManagedKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomerManagedKeysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomerManagedKeysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerManagedKeysRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomerManagedKeys(ctx context.Context, body PostCustomerManagedKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerManagedKeysRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomerManagedKeyId(ctx context.Context, customerManagedKeyId CustomerManagedKeyId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomerManagedKeyIdRequest(c.Server, customerManagedKeyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomerManagedKeyId(ctx context.Context, customerManagedKeyId CustomerManagedKeyId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomerManagedKeyIdRequest(c.Server, customerManagedKeyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSessions(ctx context.Context, params *GetSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSessionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSession(ctx context.Context, body PostSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionsSizingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionsSizingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionsSizing(ctx context.Context, body PostSessionsSizingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionsSizingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSession(ctx context.Context, sessionId SessionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSessionRequest(c.Server, sessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSession(ctx context.Context, sessionId SessionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSessionRequest(c.Server, sessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstances(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstances(ctx context.Context, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesSizingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesSizingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesSizing(ctx context.Context, body PostInstancesSizingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesSizingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInstanceId(ctx context.Context, instanceId InstanceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInstanceIdRequest(c.Server, instanceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstanceId(ctx context.Context, instanceId InstanceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstanceIdRequest(c.Server, instanceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchInstanceIdWithBody(ctx context.Context, instanceId InstanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchInstanceIdRequestWithBody(c.Server, instanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchInstanceId(ctx context.Context, instanceId InstanceId, body PatchInstanceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchInstanceIdRequest(c.Server, instanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOverwriteInstanceWithBody(ctx context.Context, instanceId InstanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOverwriteInstanceRequestWithBody(c.Server, instanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOverwriteInstance(ctx context.Context, instanceId InstanceId, body PostOverwriteInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOverwriteInstanceRequest(c.Server, instanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPauseInstanceWithBody(ctx context.Context, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPauseInstanceRequestWithBody(c.Server, instanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPauseInstance(ctx context.Context, instanceId string, body PostPauseInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPauseInstanceRequest(c.Server, instanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResumeInstanceWithBody(ctx context.Context, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResumeInstanceRequestWithBody(c.Server, instanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResumeInstance(ctx context.Context, instanceId string, body PostResumeInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResumeInstanceRequest(c.Server, instanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshots(ctx context.Context, instanceId InstanceId, params *GetSnapshotsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotsRequest(c.Server, instanceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSnapshotsWithBody(ctx context.Context, instanceId InstanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSnapshotsRequestWithBody(c.Server, instanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSnapshots(ctx context.Context, instanceId InstanceId, body PostSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSnapshotsRequest(c.Server, instanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshotSnapshotid(ctx context.Context, instanceId InstanceId, snapshotId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotSnapshotidRequest(c.Server, instanceId, snapshotId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRestoreSnapshotWithBody(ctx context.Context, instanceId InstanceId, snapshotId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRestoreSnapshotRequestWithBody(c.Server, instanceId, snapshotId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRestoreSnapshot(ctx context.Context, instanceId InstanceId, snapshotId string, body PostRestoreSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRestoreSnapshotRequest(c.Server, instanceId, snapshotId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpgradeInstanceWithBody(ctx context.Context, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpgradeInstanceRequestWithBody(c.Server, instanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpgradeInstance(ctx context.Context, instanceId string, body PostUpgradeInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpgradeInstanceRequest(c.Server, instanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectId(ctx context.Context, tenantId TenantId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectIdRequest(c.Server, tenantId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectMetricsIntegrationDetails(ctx context.Context, tenantId TenantId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectMetricsIntegrationDetailsRequest(c.Server, tenantId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCustomerManagedKeysRequest generates requests for GetCustomerManagedKeys
func NewGetCustomerManagedKeysRequest(server string, params *GetCustomerManagedKeysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer-managed-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TenantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenantId", runtime.ParamLocationQuery, *params.TenantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCustomerManagedKeysRequest calls the generic PostCustomerManagedKeys builder with application/json body
func NewPostCustomerManagedKeysRequest(server string, body PostCustomerManagedKeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomerManagedKeysRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCustomerManagedKeysRequestWithBody generates requests for PostCustomerManagedKeys with any type of body
func NewPostCustomerManagedKeysRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer-managed-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomerManagedKeyIdRequest generates requests for DeleteCustomerManagedKeyId
func NewDeleteCustomerManagedKeyIdRequest(server string, customerManagedKeyId CustomerManagedKeyId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerManagedKeyId", runtime.ParamLocationPath, customerManagedKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer-managed-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomerManagedKeyIdRequest generates requests for GetCustomerManagedKeyId
func NewGetCustomerManagedKeyIdRequest(server string, customerManagedKeyId CustomerManagedKeyId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerManagedKeyId", runtime.ParamLocationPath, customerManagedKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer-managed-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSessionsRequest generates requests for GetSessions
func NewGetSessionsRequest(server string, params *GetSessionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/graph-analytics/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.InstanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instanceId", runtime.ParamLocationQuery, *params.InstanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenantId", runtime.ParamLocationQuery, *params.TenantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSessionRequest calls the generic PostSession builder with application/json body
func NewPostSessionRequest(server string, body PostSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSessionRequestWithBody generates requests for PostSession with any type of body
func NewPostSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/graph-analytics/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSessionsSizingRequest calls the generic PostSessionsSizing builder with application/json body
func NewPostSessionsSizingRequest(server string, body PostSessionsSizingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSessionsSizingRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSessionsSizingRequestWithBody generates requests for PostSessionsSizing with any type of body
func NewPostSessionsSizingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/graph-analytics/sessions/sizing")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSessionRequest generates requests for DeleteSession
func NewDeleteSessionRequest(server string, sessionId SessionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/graph-analytics/sessions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSessionRequest generates requests for GetSession
func NewGetSessionRequest(server string, sessionId SessionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/graph-analytics/sessions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstancesRequest generates requests for GetInstances
func NewGetInstancesRequest(server string, params *GetInstancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TenantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenantId", runtime.ParamLocationQuery, *params.TenantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInstancesRequest calls the generic PostInstances builder with application/json body
func NewPostInstancesRequest(server string, body PostInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstancesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInstancesRequestWithBody generates requests for PostInstances with any type of body
func NewPostInstancesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInstancesSizingRequest calls the generic PostInstancesSizing builder with application/json body
func NewPostInstancesSizingRequest(server string, body PostInstancesSizingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstancesSizingRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInstancesSizingRequestWithBody generates requests for PostInstancesSizing with any type of body
func NewPostInstancesSizingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/sizing")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInstanceIdRequest generates requests for DeleteInstanceId
func NewDeleteInstanceIdRequest(server string, instanceId InstanceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstanceIdRequest generates requests for GetInstanceId
func NewGetInstanceIdRequest(server string, instanceId InstanceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchInstanceIdRequest calls the generic PatchInstanceId builder with application/json body
func NewPatchInstanceIdRequest(server string, instanceId InstanceId, body PatchInstanceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchInstanceIdRequestWithBody(server, instanceId, "application/json", bodyReader)
}

// NewPatchInstanceIdRequestWithBody generates requests for PatchInstanceId with any type of body
func NewPatchInstanceIdRequestWithBody(server string, instanceId InstanceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOverwriteInstanceRequest calls the generic PostOverwriteInstance builder with application/json body
func NewPostOverwriteInstanceRequest(server string, instanceId InstanceId, body PostOverwriteInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOverwriteInstanceRequestWithBody(server, instanceId, "application/json", bodyReader)
}

// NewPostOverwriteInstanceRequestWithBody generates requests for PostOverwriteInstance with any type of body
func NewPostOverwriteInstanceRequestWithBody(server string, instanceId InstanceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/overwrite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPauseInstanceRequest calls the generic PostPauseInstance builder with application/json body
func NewPostPauseInstanceRequest(server string, instanceId string, body PostPauseInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPauseInstanceRequestWithBody(server, instanceId, "application/json", bodyReader)
}

// NewPostPauseInstanceRequestWithBody generates requests for PostPauseInstance with any type of body
func NewPostPauseInstanceRequestWithBody(server string, instanceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/pause", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostResumeInstanceRequest calls the generic PostResumeInstance builder with application/json body
func NewPostResumeInstanceRequest(server string, instanceId string, body PostResumeInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostResumeInstanceRequestWithBody(server, instanceId, "application/json", bodyReader)
}

// NewPostResumeInstanceRequestWithBody generates requests for PostResumeInstance with any type of body
func NewPostResumeInstanceRequestWithBody(server string, instanceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/resume", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSnapshotsRequest generates requests for GetSnapshots
func NewGetSnapshotsRequest(server string, instanceId InstanceId, params *GetSnapshotsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/snapshots", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSnapshotsRequest calls the generic PostSnapshots builder with application/json body
func NewPostSnapshotsRequest(server string, instanceId InstanceId, body PostSnapshotsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSnapshotsRequestWithBody(server, instanceId, "application/json", bodyReader)
}

// NewPostSnapshotsRequestWithBody generates requests for PostSnapshots with any type of body
func NewPostSnapshotsRequestWithBody(server string, instanceId InstanceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/snapshots", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSnapshotSnapshotidRequest generates requests for GetSnapshotSnapshotid
func NewGetSnapshotSnapshotidRequest(server string, instanceId InstanceId, snapshotId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "snapshotId", runtime.ParamLocationPath, snapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/snapshots/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRestoreSnapshotRequest calls the generic PostRestoreSnapshot builder with application/json body
func NewPostRestoreSnapshotRequest(server string, instanceId InstanceId, snapshotId string, body PostRestoreSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRestoreSnapshotRequestWithBody(server, instanceId, snapshotId, "application/json", bodyReader)
}

// NewPostRestoreSnapshotRequestWithBody generates requests for PostRestoreSnapshot with any type of body
func NewPostRestoreSnapshotRequestWithBody(server string, instanceId InstanceId, snapshotId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "snapshotId", runtime.ParamLocationPath, snapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/snapshots/%s/restore", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUpgradeInstanceRequest calls the generic PostUpgradeInstance builder with application/json body
func NewPostUpgradeInstanceRequest(server string, instanceId string, body PostUpgradeInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUpgradeInstanceRequestWithBody(server, instanceId, "application/json", bodyReader)
}

// NewPostUpgradeInstanceRequestWithBody generates requests for PostUpgradeInstance with any type of body
func NewPostUpgradeInstanceRequestWithBody(server string, instanceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/upgrade", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectsRequest generates requests for GetProjects
func NewGetProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectIdRequest generates requests for GetProjectId
func NewGetProjectIdRequest(server string, tenantId TenantId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenants/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectMetricsIntegrationDetailsRequest generates requests for GetProjectMetricsIntegrationDetails
func NewGetProjectMetricsIntegrationDetailsRequest(server string, tenantId TenantId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenants/%s/metrics-integration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCustomerManagedKeysWithResponse request
	GetCustomerManagedKeysWithResponse(ctx context.Context, params *GetCustomerManagedKeysParams, reqEditors ...RequestEditorFn) (*GetCustomerManagedKeysResponse, error)

	// PostCustomerManagedKeysWithBodyWithResponse request with any body
	PostCustomerManagedKeysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerManagedKeysResponse, error)

	PostCustomerManagedKeysWithResponse(ctx context.Context, body PostCustomerManagedKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerManagedKeysResponse, error)

	// DeleteCustomerManagedKeyIdWithResponse request
	DeleteCustomerManagedKeyIdWithResponse(ctx context.Context, customerManagedKeyId CustomerManagedKeyId, reqEditors ...RequestEditorFn) (*DeleteCustomerManagedKeyIdResponse, error)

	// GetCustomerManagedKeyIdWithResponse request
	GetCustomerManagedKeyIdWithResponse(ctx context.Context, customerManagedKeyId CustomerManagedKeyId, reqEditors ...RequestEditorFn) (*GetCustomerManagedKeyIdResponse, error)

	// GetSessionsWithResponse request
	GetSessionsWithResponse(ctx context.Context, params *GetSessionsParams, reqEditors ...RequestEditorFn) (*GetSessionsResponse, error)

	// PostSessionWithBodyWithResponse request with any body
	PostSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionResponse, error)

	PostSessionWithResponse(ctx context.Context, body PostSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionResponse, error)

	// PostSessionsSizingWithBodyWithResponse request with any body
	PostSessionsSizingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionsSizingResponse, error)

	PostSessionsSizingWithResponse(ctx context.Context, body PostSessionsSizingJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionsSizingResponse, error)

	// DeleteSessionWithResponse request
	DeleteSessionWithResponse(ctx context.Context, sessionId SessionId, reqEditors ...RequestEditorFn) (*DeleteSessionResponse, error)

	// GetSessionWithResponse request
	GetSessionWithResponse(ctx context.Context, sessionId SessionId, reqEditors ...RequestEditorFn) (*GetSessionResponse, error)

	// GetInstancesWithResponse request
	GetInstancesWithResponse(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*GetInstancesResponse, error)

	// PostInstancesWithBodyWithResponse request with any body
	PostInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error)

	PostInstancesWithResponse(ctx context.Context, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error)

	// PostInstancesSizingWithBodyWithResponse request with any body
	PostInstancesSizingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesSizingResponse, error)

	PostInstancesSizingWithResponse(ctx context.Context, body PostInstancesSizingJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesSizingResponse, error)

	// DeleteInstanceIdWithResponse request
	DeleteInstanceIdWithResponse(ctx context.Context, instanceId InstanceId, reqEditors ...RequestEditorFn) (*DeleteInstanceIdResponse, error)

	// GetInstanceIdWithResponse request
	GetInstanceIdWithResponse(ctx context.Context, instanceId InstanceId, reqEditors ...RequestEditorFn) (*GetInstanceIdResponse, error)

	// PatchInstanceIdWithBodyWithResponse request with any body
	PatchInstanceIdWithBodyWithResponse(ctx context.Context, instanceId InstanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchInstanceIdResponse, error)

	PatchInstanceIdWithResponse(ctx context.Context, instanceId InstanceId, body PatchInstanceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchInstanceIdResponse, error)

	// PostOverwriteInstanceWithBodyWithResponse request with any body
	PostOverwriteInstanceWithBodyWithResponse(ctx context.Context, instanceId InstanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOverwriteInstanceResponse, error)

	PostOverwriteInstanceWithResponse(ctx context.Context, instanceId InstanceId, body PostOverwriteInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOverwriteInstanceResponse, error)

	// PostPauseInstanceWithBodyWithResponse request with any body
	PostPauseInstanceWithBodyWithResponse(ctx context.Context, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPauseInstanceResponse, error)

	PostPauseInstanceWithResponse(ctx context.Context, instanceId string, body PostPauseInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPauseInstanceResponse, error)

	// PostResumeInstanceWithBodyWithResponse request with any body
	PostResumeInstanceWithBodyWithResponse(ctx context.Context, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResumeInstanceResponse, error)

	PostResumeInstanceWithResponse(ctx context.Context, instanceId string, body PostResumeInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResumeInstanceResponse, error)

	// GetSnapshotsWithResponse request
	GetSnapshotsWithResponse(ctx context.Context, instanceId InstanceId, params *GetSnapshotsParams, reqEditors ...RequestEditorFn) (*GetSnapshotsResponse, error)

	// PostSnapshotsWithBodyWithResponse request with any body
	PostSnapshotsWithBodyWithResponse(ctx context.Context, instanceId InstanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSnapshotsResponse, error)

	PostSnapshotsWithResponse(ctx context.Context, instanceId InstanceId, body PostSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSnapshotsResponse, error)

	// GetSnapshotSnapshotidWithResponse request
	GetSnapshotSnapshotidWithResponse(ctx context.Context, instanceId InstanceId, snapshotId string, reqEditors ...RequestEditorFn) (*GetSnapshotSnapshotidResponse, error)

	// PostRestoreSnapshotWithBodyWithResponse request with any body
	PostRestoreSnapshotWithBodyWithResponse(ctx context.Context, instanceId InstanceId, snapshotId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRestoreSnapshotResponse, error)

	PostRestoreSnapshotWithResponse(ctx context.Context, instanceId InstanceId, snapshotId string, body PostRestoreSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRestoreSnapshotResponse, error)

	// PostUpgradeInstanceWithBodyWithResponse request with any body
	PostUpgradeInstanceWithBodyWithResponse(ctx context.Context, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpgradeInstanceResponse, error)

	PostUpgradeInstanceWithResponse(ctx context.Context, instanceId string, body PostUpgradeInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpgradeInstanceResponse, error)

	// GetProjectsWithResponse request
	GetProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error)

	// GetProjectIdWithResponse request
	GetProjectIdWithResponse(ctx context.Context, tenantId TenantId, reqEditors ...RequestEditorFn) (*GetProjectIdResponse, error)

	// GetProjectMetricsIntegrationDetailsWithResponse request
	GetProjectMetricsIntegrationDetailsWithResponse(ctx context.Context, tenantId TenantId, reqEditors ...RequestEditorFn) (*GetProjectMetricsIntegrationDetailsResponse, error)
}

type GetCustomerManagedKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []struct {
			// Id The UUID of the key
			Id string `json:"id"`

			// Name The name of the key
			Name string `json:"name"`

			// TenantId The id of the project which the key belongs to
			TenantId string `json:"tenant_id"`
		} `json:"data"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetCustomerManagedKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerManagedKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomerManagedKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *CustomerManagedKey
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON415      *UnsupportedMediaType
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
	JSON502      *BadGateway
	JSON503      *ServiceUnavailable
	JSON504      *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostCustomerManagedKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomerManagedKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomerManagedKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *CustomerManagedKeyNotFound
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
	JSON502      *BadGateway
	JSON503      *ServiceUnavailable
	JSON504      *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r DeleteCustomerManagedKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomerManagedKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomerManagedKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerManagedKey
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *CustomerManagedKeyNotFound
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
	JSON502      *BadGateway
	JSON503      *ServiceUnavailable
	JSON504      *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetCustomerManagedKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerManagedKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []GdsSessionDetails `json:"data"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *InstanceNotFound
	JSON429 *TooManyRequests
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data map[string]interface{} `json:"data"`

		// Errors Used for describing one or more errors returned by an endpoint.
		Errors *Error `json:"errors,omitempty"`
	}
	JSON202 *struct {
		Data map[string]interface{} `json:"data"`

		// Errors Used for describing one or more errors returned by an endpoint.
		Errors *Error `json:"errors,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON409 *SessionConflict
	JSON429 *TooManyRequests
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSessionsSizingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			// EstimatedMemory The estimated memory for the session.
			EstimatedMemory string `json:"estimated_memory"`

			// RecommendedSize The recommended session size.
			RecommendedSize string `json:"recommended_size"`
		} `json:"data,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON415 *UnsupportedMediaType
	JSON429 *TooManyRequests
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostSessionsSizingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSessionsSizingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data *struct {
			Id *string `json:"id,omitempty"`
		} `json:"data,omitempty"`

		// Errors Used for describing one or more errors returned by an endpoint.
		Errors *Error `json:"errors,omitempty"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *SessionNotFound
	JSON429 *TooManyRequests
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r DeleteSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data map[string]interface{} `json:"data"`

		// Errors Used for describing one or more errors returned by an endpoint.
		Errors *Error `json:"errors,omitempty"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *SessionNotFound
	JSON429 *TooManyRequests
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []InstanceSummary `json:"data"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data *struct {
			// CloudProvider The cloud provider hosting the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid cloud_providers for your project.
			CloudProvider CloudProvider `json:"cloud_provider"`

			// ConnectionUrl The URL to connect to the Neo4j instance with.
			ConnectionUrl string `json:"connection_url"`

			// CreatedAt The timestamp when the instance was created.
			CreatedAt string `json:"created_at"`

			// GraphAnalyticsPlugin The graph analytics plugin configuration when the instance was created.
			GraphAnalyticsPlugin *bool `json:"graph_analytics_plugin,omitempty"`

			// Id The instance ID.
			Id string `json:"id"`

			// Name Name of the instance
			Name string `json:"name"`

			// Password The initial password for authenticating with this instance.
			Password string `json:"password"`

			// Region The region where the instance is hosted. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid regions for your project.
			Region InstanceRegion `json:"region"`

			// TenantId The ID for the project.
			TenantId string `json:"tenant_id"`

			// Type The type of the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid types for your project. The `enterprise-db` type is used to represent Virtual Dedicated Cloud.
			Type InstanceType `json:"type"`

			// Username The initial username for authenticating with this instance.
			Username string `json:"username"`

			// VectorOptimized The vector optimization configuration when the instance was created.
			VectorOptimized *bool `json:"vector_optimized,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON400 *Error
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON405 *Error
	JSON415 *UnsupportedMediaType
	JSON429 *TooManyRequests
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstancesSizingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			// DidExceedMaximum Indicates if the instance size exceeds the maximum allowed.
			DidExceedMaximum bool `json:"did_exceed_maximum"`

			// MinRequiredMemory The minimum required memory for the instance.
			MinRequiredMemory string `json:"min_required_memory"`

			// RecommendedSize The recommended instance size.
			RecommendedSize string `json:"recommended_size"`
		} `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON415 *UnsupportedMediaType
	JSON429 *TooManyRequests
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostInstancesSizingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstancesSizingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInstanceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Instance
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *InstanceNotFound
	JSON409      *Conflict
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
	JSON502      *BadGateway
	JSON503      *ServiceUnavailable
	JSON504      *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r DeleteInstanceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInstanceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstanceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *InstanceNotFound
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
	JSON502      *BadGateway
	JSON503      *ServiceUnavailable
	JSON504      *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetInstanceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstanceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchInstanceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
	JSON202      *map[string]interface{}
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *InstanceNotFound
	JSON409      *Conflict
	JSON415      *UnsupportedMediaType
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
	JSON502      *BadGateway
	JSON503      *ServiceUnavailable
	JSON504      *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PatchInstanceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchInstanceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOverwriteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Instance
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *InstanceNotFound
	JSON409      *Conflict
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
	JSON502      *BadGateway
	JSON503      *ServiceUnavailable
	JSON504      *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostOverwriteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOverwriteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPauseInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Instance
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *InstanceNotFound
	JSON409      *Conflict
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
	JSON502      *BadGateway
	JSON503      *ServiceUnavailable
	JSON504      *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostPauseInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPauseInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostResumeInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Instance
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *InstanceNotFound
	JSON409      *Conflict
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
	JSON502      *BadGateway
	JSON503      *ServiceUnavailable
	JSON504      *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostResumeInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostResumeInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnapshotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]struct {
			InstanceId *string                     `json:"instance_id,omitempty"`
			Profile    *GetSnapshots200DataProfile `json:"profile,omitempty"`
			SnapshotId *string                     `json:"snapshot_id,omitempty"`
			Status     *GetSnapshots200DataStatus  `json:"status,omitempty"`
			Timestamp  *string                     `json:"timestamp,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *InstanceNotFound
	JSON429 *TooManyRequests
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}
type GetSnapshots200DataProfile string
type GetSnapshots200DataStatus string

// Status returns HTTPResponse.Status
func (r GetSnapshotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnapshotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSnapshotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data *struct {
			// SnapshotId The ID of the created snapshot
			SnapshotId string `json:"snapshot_id"`
		} `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *InstanceNotFound
	JSON409 *Conflict
	JSON429 *TooManyRequests
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostSnapshotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSnapshotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnapshotSnapshotidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			InstanceId *string                              `json:"instance_id,omitempty"`
			Profile    *GetSnapshotSnapshotid200DataProfile `json:"profile,omitempty"`
			SnapshotId *string                              `json:"snapshot_id,omitempty"`
			Status     *GetSnapshotSnapshotid200DataStatus  `json:"status,omitempty"`
			Timestamp  *string                              `json:"timestamp,omitempty"`
		} `json:"data"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *SnapshotNotFound
	JSON429 *TooManyRequests
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}
type GetSnapshotSnapshotid200DataProfile string
type GetSnapshotSnapshotid200DataStatus string

// Status returns HTTPResponse.Status
func (r GetSnapshotSnapshotidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnapshotSnapshotidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRestoreSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Instance
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *SnapshotNotFound
	JSON409      *Conflict
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
	JSON502      *BadGateway
	JSON503      *ServiceUnavailable
	JSON504      *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostRestoreSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRestoreSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUpgradeInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *InstanceNotFound
	JSON409      *Conflict
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
	JSON502      *BadGateway
	JSON503      *ServiceUnavailable
	JSON504      *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostUpgradeInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUpgradeInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []ProjectSummary `json:"data"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON429 *TooManyRequests
	JSON500 *InternalServerError
	JSON502 *BadGateway
	JSON503 *ServiceUnavailable
	JSON504 *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *ProjectNotFound
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
	JSON502      *BadGateway
	JSON503      *ServiceUnavailable
	JSON504      *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetProjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectMetricsIntegrationDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MetricsIntegrationDetails
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *ProjectNotFound
	JSON429      *TooManyRequests
	JSON500      *InternalServerError
	JSON502      *BadGateway
	JSON503      *ServiceUnavailable
	JSON504      *GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetProjectMetricsIntegrationDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectMetricsIntegrationDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCustomerManagedKeysWithResponse request returning *GetCustomerManagedKeysResponse
func (c *ClientWithResponses) GetCustomerManagedKeysWithResponse(ctx context.Context, params *GetCustomerManagedKeysParams, reqEditors ...RequestEditorFn) (*GetCustomerManagedKeysResponse, error) {
	rsp, err := c.GetCustomerManagedKeys(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerManagedKeysResponse(rsp)
}

// PostCustomerManagedKeysWithBodyWithResponse request with arbitrary body returning *PostCustomerManagedKeysResponse
func (c *ClientWithResponses) PostCustomerManagedKeysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerManagedKeysResponse, error) {
	rsp, err := c.PostCustomerManagedKeysWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerManagedKeysResponse(rsp)
}

func (c *ClientWithResponses) PostCustomerManagedKeysWithResponse(ctx context.Context, body PostCustomerManagedKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerManagedKeysResponse, error) {
	rsp, err := c.PostCustomerManagedKeys(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerManagedKeysResponse(rsp)
}

// DeleteCustomerManagedKeyIdWithResponse request returning *DeleteCustomerManagedKeyIdResponse
func (c *ClientWithResponses) DeleteCustomerManagedKeyIdWithResponse(ctx context.Context, customerManagedKeyId CustomerManagedKeyId, reqEditors ...RequestEditorFn) (*DeleteCustomerManagedKeyIdResponse, error) {
	rsp, err := c.DeleteCustomerManagedKeyId(ctx, customerManagedKeyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomerManagedKeyIdResponse(rsp)
}

// GetCustomerManagedKeyIdWithResponse request returning *GetCustomerManagedKeyIdResponse
func (c *ClientWithResponses) GetCustomerManagedKeyIdWithResponse(ctx context.Context, customerManagedKeyId CustomerManagedKeyId, reqEditors ...RequestEditorFn) (*GetCustomerManagedKeyIdResponse, error) {
	rsp, err := c.GetCustomerManagedKeyId(ctx, customerManagedKeyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerManagedKeyIdResponse(rsp)
}

// GetSessionsWithResponse request returning *GetSessionsResponse
func (c *ClientWithResponses) GetSessionsWithResponse(ctx context.Context, params *GetSessionsParams, reqEditors ...RequestEditorFn) (*GetSessionsResponse, error) {
	rsp, err := c.GetSessions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSessionsResponse(rsp)
}

// PostSessionWithBodyWithResponse request with arbitrary body returning *PostSessionResponse
func (c *ClientWithResponses) PostSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionResponse, error) {
	rsp, err := c.PostSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionResponse(rsp)
}

func (c *ClientWithResponses) PostSessionWithResponse(ctx context.Context, body PostSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionResponse, error) {
	rsp, err := c.PostSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionResponse(rsp)
}

// PostSessionsSizingWithBodyWithResponse request with arbitrary body returning *PostSessionsSizingResponse
func (c *ClientWithResponses) PostSessionsSizingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionsSizingResponse, error) {
	rsp, err := c.PostSessionsSizingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionsSizingResponse(rsp)
}

func (c *ClientWithResponses) PostSessionsSizingWithResponse(ctx context.Context, body PostSessionsSizingJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionsSizingResponse, error) {
	rsp, err := c.PostSessionsSizing(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionsSizingResponse(rsp)
}

// DeleteSessionWithResponse request returning *DeleteSessionResponse
func (c *ClientWithResponses) DeleteSessionWithResponse(ctx context.Context, sessionId SessionId, reqEditors ...RequestEditorFn) (*DeleteSessionResponse, error) {
	rsp, err := c.DeleteSession(ctx, sessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSessionResponse(rsp)
}

// GetSessionWithResponse request returning *GetSessionResponse
func (c *ClientWithResponses) GetSessionWithResponse(ctx context.Context, sessionId SessionId, reqEditors ...RequestEditorFn) (*GetSessionResponse, error) {
	rsp, err := c.GetSession(ctx, sessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSessionResponse(rsp)
}

// GetInstancesWithResponse request returning *GetInstancesResponse
func (c *ClientWithResponses) GetInstancesWithResponse(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*GetInstancesResponse, error) {
	rsp, err := c.GetInstances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesResponse(rsp)
}

// PostInstancesWithBodyWithResponse request with arbitrary body returning *PostInstancesResponse
func (c *ClientWithResponses) PostInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error) {
	rsp, err := c.PostInstancesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesResponse(rsp)
}

func (c *ClientWithResponses) PostInstancesWithResponse(ctx context.Context, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error) {
	rsp, err := c.PostInstances(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesResponse(rsp)
}

// PostInstancesSizingWithBodyWithResponse request with arbitrary body returning *PostInstancesSizingResponse
func (c *ClientWithResponses) PostInstancesSizingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesSizingResponse, error) {
	rsp, err := c.PostInstancesSizingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesSizingResponse(rsp)
}

func (c *ClientWithResponses) PostInstancesSizingWithResponse(ctx context.Context, body PostInstancesSizingJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesSizingResponse, error) {
	rsp, err := c.PostInstancesSizing(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesSizingResponse(rsp)
}

// DeleteInstanceIdWithResponse request returning *DeleteInstanceIdResponse
func (c *ClientWithResponses) DeleteInstanceIdWithResponse(ctx context.Context, instanceId InstanceId, reqEditors ...RequestEditorFn) (*DeleteInstanceIdResponse, error) {
	rsp, err := c.DeleteInstanceId(ctx, instanceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInstanceIdResponse(rsp)
}

// GetInstanceIdWithResponse request returning *GetInstanceIdResponse
func (c *ClientWithResponses) GetInstanceIdWithResponse(ctx context.Context, instanceId InstanceId, reqEditors ...RequestEditorFn) (*GetInstanceIdResponse, error) {
	rsp, err := c.GetInstanceId(ctx, instanceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstanceIdResponse(rsp)
}

// PatchInstanceIdWithBodyWithResponse request with arbitrary body returning *PatchInstanceIdResponse
func (c *ClientWithResponses) PatchInstanceIdWithBodyWithResponse(ctx context.Context, instanceId InstanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchInstanceIdResponse, error) {
	rsp, err := c.PatchInstanceIdWithBody(ctx, instanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchInstanceIdResponse(rsp)
}

func (c *ClientWithResponses) PatchInstanceIdWithResponse(ctx context.Context, instanceId InstanceId, body PatchInstanceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchInstanceIdResponse, error) {
	rsp, err := c.PatchInstanceId(ctx, instanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchInstanceIdResponse(rsp)
}

// PostOverwriteInstanceWithBodyWithResponse request with arbitrary body returning *PostOverwriteInstanceResponse
func (c *ClientWithResponses) PostOverwriteInstanceWithBodyWithResponse(ctx context.Context, instanceId InstanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOverwriteInstanceResponse, error) {
	rsp, err := c.PostOverwriteInstanceWithBody(ctx, instanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOverwriteInstanceResponse(rsp)
}

func (c *ClientWithResponses) PostOverwriteInstanceWithResponse(ctx context.Context, instanceId InstanceId, body PostOverwriteInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOverwriteInstanceResponse, error) {
	rsp, err := c.PostOverwriteInstance(ctx, instanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOverwriteInstanceResponse(rsp)
}

// PostPauseInstanceWithBodyWithResponse request with arbitrary body returning *PostPauseInstanceResponse
func (c *ClientWithResponses) PostPauseInstanceWithBodyWithResponse(ctx context.Context, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPauseInstanceResponse, error) {
	rsp, err := c.PostPauseInstanceWithBody(ctx, instanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPauseInstanceResponse(rsp)
}

func (c *ClientWithResponses) PostPauseInstanceWithResponse(ctx context.Context, instanceId string, body PostPauseInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPauseInstanceResponse, error) {
	rsp, err := c.PostPauseInstance(ctx, instanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPauseInstanceResponse(rsp)
}

// PostResumeInstanceWithBodyWithResponse request with arbitrary body returning *PostResumeInstanceResponse
func (c *ClientWithResponses) PostResumeInstanceWithBodyWithResponse(ctx context.Context, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResumeInstanceResponse, error) {
	rsp, err := c.PostResumeInstanceWithBody(ctx, instanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResumeInstanceResponse(rsp)
}

func (c *ClientWithResponses) PostResumeInstanceWithResponse(ctx context.Context, instanceId string, body PostResumeInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResumeInstanceResponse, error) {
	rsp, err := c.PostResumeInstance(ctx, instanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResumeInstanceResponse(rsp)
}

// GetSnapshotsWithResponse request returning *GetSnapshotsResponse
func (c *ClientWithResponses) GetSnapshotsWithResponse(ctx context.Context, instanceId InstanceId, params *GetSnapshotsParams, reqEditors ...RequestEditorFn) (*GetSnapshotsResponse, error) {
	rsp, err := c.GetSnapshots(ctx, instanceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotsResponse(rsp)
}

// PostSnapshotsWithBodyWithResponse request with arbitrary body returning *PostSnapshotsResponse
func (c *ClientWithResponses) PostSnapshotsWithBodyWithResponse(ctx context.Context, instanceId InstanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSnapshotsResponse, error) {
	rsp, err := c.PostSnapshotsWithBody(ctx, instanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSnapshotsResponse(rsp)
}

func (c *ClientWithResponses) PostSnapshotsWithResponse(ctx context.Context, instanceId InstanceId, body PostSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSnapshotsResponse, error) {
	rsp, err := c.PostSnapshots(ctx, instanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSnapshotsResponse(rsp)
}

// GetSnapshotSnapshotidWithResponse request returning *GetSnapshotSnapshotidResponse
func (c *ClientWithResponses) GetSnapshotSnapshotidWithResponse(ctx context.Context, instanceId InstanceId, snapshotId string, reqEditors ...RequestEditorFn) (*GetSnapshotSnapshotidResponse, error) {
	rsp, err := c.GetSnapshotSnapshotid(ctx, instanceId, snapshotId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotSnapshotidResponse(rsp)
}

// PostRestoreSnapshotWithBodyWithResponse request with arbitrary body returning *PostRestoreSnapshotResponse
func (c *ClientWithResponses) PostRestoreSnapshotWithBodyWithResponse(ctx context.Context, instanceId InstanceId, snapshotId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRestoreSnapshotResponse, error) {
	rsp, err := c.PostRestoreSnapshotWithBody(ctx, instanceId, snapshotId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRestoreSnapshotResponse(rsp)
}

func (c *ClientWithResponses) PostRestoreSnapshotWithResponse(ctx context.Context, instanceId InstanceId, snapshotId string, body PostRestoreSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRestoreSnapshotResponse, error) {
	rsp, err := c.PostRestoreSnapshot(ctx, instanceId, snapshotId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRestoreSnapshotResponse(rsp)
}

// PostUpgradeInstanceWithBodyWithResponse request with arbitrary body returning *PostUpgradeInstanceResponse
func (c *ClientWithResponses) PostUpgradeInstanceWithBodyWithResponse(ctx context.Context, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpgradeInstanceResponse, error) {
	rsp, err := c.PostUpgradeInstanceWithBody(ctx, instanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpgradeInstanceResponse(rsp)
}

func (c *ClientWithResponses) PostUpgradeInstanceWithResponse(ctx context.Context, instanceId string, body PostUpgradeInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpgradeInstanceResponse, error) {
	rsp, err := c.PostUpgradeInstance(ctx, instanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpgradeInstanceResponse(rsp)
}

// GetProjectsWithResponse request returning *GetProjectsResponse
func (c *ClientWithResponses) GetProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error) {
	rsp, err := c.GetProjects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsResponse(rsp)
}

// GetProjectIdWithResponse request returning *GetProjectIdResponse
func (c *ClientWithResponses) GetProjectIdWithResponse(ctx context.Context, tenantId TenantId, reqEditors ...RequestEditorFn) (*GetProjectIdResponse, error) {
	rsp, err := c.GetProjectId(ctx, tenantId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectIdResponse(rsp)
}

// GetProjectMetricsIntegrationDetailsWithResponse request returning *GetProjectMetricsIntegrationDetailsResponse
func (c *ClientWithResponses) GetProjectMetricsIntegrationDetailsWithResponse(ctx context.Context, tenantId TenantId, reqEditors ...RequestEditorFn) (*GetProjectMetricsIntegrationDetailsResponse, error) {
	rsp, err := c.GetProjectMetricsIntegrationDetails(ctx, tenantId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectMetricsIntegrationDetailsResponse(rsp)
}

// ParseGetCustomerManagedKeysResponse parses an HTTP response from a GetCustomerManagedKeysWithResponse call
func ParseGetCustomerManagedKeysResponse(rsp *http.Response) (*GetCustomerManagedKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerManagedKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []struct {
				// Id The UUID of the key
				Id string `json:"id"`

				// Name The name of the key
				Name string `json:"name"`

				// TenantId The id of the project which the key belongs to
				TenantId string `json:"tenant_id"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostCustomerManagedKeysResponse parses an HTTP response from a PostCustomerManagedKeysWithResponse call
func ParsePostCustomerManagedKeysResponse(rsp *http.Response) (*PostCustomerManagedKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomerManagedKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest CustomerManagedKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteCustomerManagedKeyIdResponse parses an HTTP response from a DeleteCustomerManagedKeyIdWithResponse call
func ParseDeleteCustomerManagedKeyIdResponse(rsp *http.Response) (*DeleteCustomerManagedKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomerManagedKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CustomerManagedKeyNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetCustomerManagedKeyIdResponse parses an HTTP response from a GetCustomerManagedKeyIdWithResponse call
func ParseGetCustomerManagedKeyIdResponse(rsp *http.Response) (*GetCustomerManagedKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerManagedKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerManagedKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CustomerManagedKeyNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetSessionsResponse parses an HTTP response from a GetSessionsWithResponse call
func ParseGetSessionsResponse(rsp *http.Response) (*GetSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []GdsSessionDetails `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest InstanceNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostSessionResponse parses an HTTP response from a PostSessionWithResponse call
func ParsePostSessionResponse(rsp *http.Response) (*PostSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data map[string]interface{} `json:"data"`

			// Errors Used for describing one or more errors returned by an endpoint.
			Errors *Error `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data map[string]interface{} `json:"data"`

			// Errors Used for describing one or more errors returned by an endpoint.
			Errors *Error `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest SessionConflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostSessionsSizingResponse parses an HTTP response from a PostSessionsSizingWithResponse call
func ParsePostSessionsSizingResponse(rsp *http.Response) (*PostSessionsSizingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSessionsSizingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				// EstimatedMemory The estimated memory for the session.
				EstimatedMemory string `json:"estimated_memory"`

				// RecommendedSize The recommended session size.
				RecommendedSize string `json:"recommended_size"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteSessionResponse parses an HTTP response from a DeleteSessionWithResponse call
func ParseDeleteSessionResponse(rsp *http.Response) (*DeleteSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data *struct {
				Id *string `json:"id,omitempty"`
			} `json:"data,omitempty"`

			// Errors Used for describing one or more errors returned by an endpoint.
			Errors *Error `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SessionNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetSessionResponse parses an HTTP response from a GetSessionWithResponse call
func ParseGetSessionResponse(rsp *http.Response) (*GetSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data map[string]interface{} `json:"data"`

			// Errors Used for describing one or more errors returned by an endpoint.
			Errors *Error `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SessionNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetInstancesResponse parses an HTTP response from a GetInstancesWithResponse call
func ParseGetInstancesResponse(rsp *http.Response) (*GetInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []InstanceSummary `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostInstancesResponse parses an HTTP response from a PostInstancesWithResponse call
func ParsePostInstancesResponse(rsp *http.Response) (*PostInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data *struct {
				// CloudProvider The cloud provider hosting the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid cloud_providers for your project.
				CloudProvider CloudProvider `json:"cloud_provider"`

				// ConnectionUrl The URL to connect to the Neo4j instance with.
				ConnectionUrl string `json:"connection_url"`

				// CreatedAt The timestamp when the instance was created.
				CreatedAt string `json:"created_at"`

				// GraphAnalyticsPlugin The graph analytics plugin configuration when the instance was created.
				GraphAnalyticsPlugin *bool `json:"graph_analytics_plugin,omitempty"`

				// Id The instance ID.
				Id string `json:"id"`

				// Name Name of the instance
				Name string `json:"name"`

				// Password The initial password for authenticating with this instance.
				Password string `json:"password"`

				// Region The region where the instance is hosted. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid regions for your project.
				Region InstanceRegion `json:"region"`

				// TenantId The ID for the project.
				TenantId string `json:"tenant_id"`

				// Type The type of the instance. Please refer to your Aura project instance configurations, returned by the GET /tenants/{tenantId} endpoint, for a list of valid types for your project. The `enterprise-db` type is used to represent Virtual Dedicated Cloud.
				Type InstanceType `json:"type"`

				// Username The initial username for authenticating with this instance.
				Username string `json:"username"`

				// VectorOptimized The vector optimization configuration when the instance was created.
				VectorOptimized *bool `json:"vector_optimized,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostInstancesSizingResponse parses an HTTP response from a PostInstancesSizingWithResponse call
func ParsePostInstancesSizingResponse(rsp *http.Response) (*PostInstancesSizingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstancesSizingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				// DidExceedMaximum Indicates if the instance size exceeds the maximum allowed.
				DidExceedMaximum bool `json:"did_exceed_maximum"`

				// MinRequiredMemory The minimum required memory for the instance.
				MinRequiredMemory string `json:"min_required_memory"`

				// RecommendedSize The recommended instance size.
				RecommendedSize string `json:"recommended_size"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteInstanceIdResponse parses an HTTP response from a DeleteInstanceIdWithResponse call
func ParseDeleteInstanceIdResponse(rsp *http.Response) (*DeleteInstanceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInstanceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest InstanceNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetInstanceIdResponse parses an HTTP response from a GetInstanceIdWithResponse call
func ParseGetInstanceIdResponse(rsp *http.Response) (*GetInstanceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstanceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest InstanceNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePatchInstanceIdResponse parses an HTTP response from a PatchInstanceIdWithResponse call
func ParsePatchInstanceIdResponse(rsp *http.Response) (*PatchInstanceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchInstanceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest InstanceNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostOverwriteInstanceResponse parses an HTTP response from a PostOverwriteInstanceWithResponse call
func ParsePostOverwriteInstanceResponse(rsp *http.Response) (*PostOverwriteInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOverwriteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest InstanceNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostPauseInstanceResponse parses an HTTP response from a PostPauseInstanceWithResponse call
func ParsePostPauseInstanceResponse(rsp *http.Response) (*PostPauseInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPauseInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest InstanceNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostResumeInstanceResponse parses an HTTP response from a PostResumeInstanceWithResponse call
func ParsePostResumeInstanceResponse(rsp *http.Response) (*PostResumeInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostResumeInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest InstanceNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetSnapshotsResponse parses an HTTP response from a GetSnapshotsWithResponse call
func ParseGetSnapshotsResponse(rsp *http.Response) (*GetSnapshotsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnapshotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]struct {
				InstanceId *string                     `json:"instance_id,omitempty"`
				Profile    *GetSnapshots200DataProfile `json:"profile,omitempty"`
				SnapshotId *string                     `json:"snapshot_id,omitempty"`
				Status     *GetSnapshots200DataStatus  `json:"status,omitempty"`
				Timestamp  *string                     `json:"timestamp,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest InstanceNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostSnapshotsResponse parses an HTTP response from a PostSnapshotsWithResponse call
func ParsePostSnapshotsResponse(rsp *http.Response) (*PostSnapshotsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSnapshotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data *struct {
				// SnapshotId The ID of the created snapshot
				SnapshotId string `json:"snapshot_id"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest InstanceNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetSnapshotSnapshotidResponse parses an HTTP response from a GetSnapshotSnapshotidWithResponse call
func ParseGetSnapshotSnapshotidResponse(rsp *http.Response) (*GetSnapshotSnapshotidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnapshotSnapshotidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				InstanceId *string                              `json:"instance_id,omitempty"`
				Profile    *GetSnapshotSnapshotid200DataProfile `json:"profile,omitempty"`
				SnapshotId *string                              `json:"snapshot_id,omitempty"`
				Status     *GetSnapshotSnapshotid200DataStatus  `json:"status,omitempty"`
				Timestamp  *string                              `json:"timestamp,omitempty"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SnapshotNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostRestoreSnapshotResponse parses an HTTP response from a PostRestoreSnapshotWithResponse call
func ParsePostRestoreSnapshotResponse(rsp *http.Response) (*PostRestoreSnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRestoreSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SnapshotNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostUpgradeInstanceResponse parses an HTTP response from a PostUpgradeInstanceWithResponse call
func ParsePostUpgradeInstanceResponse(rsp *http.Response) (*PostUpgradeInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUpgradeInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest InstanceNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetProjectsResponse parses an HTTP response from a GetProjectsWithResponse call
func ParseGetProjectsResponse(rsp *http.Response) (*GetProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []ProjectSummary `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetProjectIdResponse parses an HTTP response from a GetProjectIdWithResponse call
func ParseGetProjectIdResponse(rsp *http.Response) (*GetProjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProjectNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetProjectMetricsIntegrationDetailsResponse parses an HTTP response from a GetProjectMetricsIntegrationDetailsWithResponse call
func ParseGetProjectMetricsIntegrationDetailsResponse(rsp *http.Response) (*GetProjectMetricsIntegrationDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectMetricsIntegrationDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MetricsIntegrationDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProjectNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}
